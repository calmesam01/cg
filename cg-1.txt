***********************3D projection************************************************************************
#include<stdio.h>
#include<math.h>
#include<graphics.h>

main()
{

int x1,y1,x2,y2,gd,gm;
int ymax,a[4][8];
float par[4][4],b[4][8];
int i,j,k,m,n,p;
int xp, yp, zp, x, y, z;


a[0][0] = 100; a[1][0] = 100; a[2][0] = -100;
a[0][1] = 200; a[1][1] = 100; a[2][1] = -100;

a[0][2] = 200; a[1][2] = 200; a[2][2] = -100;
a[0][3] = 100; a[1][3] = 200; a[2][3] = -100;

a[0][4] = 100; a[1][4] = 100; a[2][4] = -200;
a[0][5] = 200; a[1][5] = 100; a[2][5] = -200;

a[0][6] = 200; a[1][6] = 200; a[2][6] = -200;
a[0][7] = 100; a[1][7] = 200; a[2][7] = -200;


detectgraph(&gd,&gm);
initgraph(&gd,&gm, "c:\\tc\\bgi");

ymax = getmaxy();
xp = 300; yp = 320; zp = 100;

for(j=0; j<8; j++)
{
x = a[0][j]; y = a[1][j]; z = a[2][j];

b[0][j] = xp - ( (float)( x - xp )/(z - zp)) * (zp);
b[1][j] = yp - ( (float)( y - yp )/(z - zp)) * (zp);
}

/*- front plane display -*/

for(j=0;j<3;j++)
{
x1=(int) b[0][j]; y1=(int) b[1][j];
x2=(int) b[0][j+1]; y2=(int) b[1][j+1];
line( x1,ymax-y1,x2,ymax-y2);

}
x1=(int) b[0][3]; y1=(int) b[1][3];
x2=(int) b[0][0]; y2=(int) b[1][0];
line( x1, ymax-y1, x2, ymax-y2);

/*- back plane display -*/
setcolor(11);
for(j=4;j<7;j++)
{
x1=(int) b[0][j]; y1=(int) b[1][j];
x2=(int) b[0][j+1]; y2=(int) b[1][j+1];
line( x1, ymax-y1, x2, ymax-y2);

}
x1=(int) b[0][7]; y1=(int) b[1][7];
x2=(int) b[0][4]; y2=(int) b[1][4];
line( x1, ymax-y1, x2, ymax-y2);

setcolor(7);
for(i=0;i<4;i++)
{
x1=(int) b[0][i]; y1=(int) b[1][i];
x2=(int) b[0][4+i]; y2=(int) b[1][4+i];
line( x1, ymax-y1, x2, ymax-y2);
}


getch(); getch();

}









*********************Light in Dark Room*************************************************************
#include<graphics.h>
#include<conio.h>
main()
{
int gd=DETECT,gm,i=0;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
for(i=0;i<=470;i++)
{ setcolor(56);
arc(5,2,400,340,25+i);
delay(10);
}
getch();
closegraph();
return 0;
}






*********************Mid Point Circle*************************************************************
# include <iostream.h>
# include <conio.h>
# include <graphics.h>
# include <math.h>
void Circle(int Radius,int xC,int yC);
void main()
{
    int gDriver=DETECT, gMode;
    initgraph(&gDriver,&gMode,"c:\\tc\\bgi");

    int Radius, xC, yC;
    cout<<”*****MID POINT CIRCLE DRAWING ALGORITHM******”<<”\n”<<”\n”;
    cout<< endl << "Enter the value of radius:";
    cin>>Radius;
    cout<<”Enter x coordinate of centre xc:”;
    cin>>xC;
    cout<<”Enter y coordinate of centre yc:”;
    cin>>yC;
    cleardevice();
    Circle(Radius,xC,yC);
    getch();
    return;
}
void Circle(int Radius,int xC,int yC)
{
    int P;
    int x,y;
    void Draw(int x,int y,int xC,int yC);
    P = 1 - Radius;
    x = 0;
    y = Radius;
    Draw(x,y,xC,yC);
    while (x<=y)
    {
        x++;
        if (P<0)
        {
            P += 2 * x + 1;
        }
        else
        {
            P += 2 * (x - y) + 1;
            y--;
        }
        Draw(x,y,xC,yC);
    }

}
void Draw(int x,int y,int xC,int yC)
{
    putpixel(xC + x,yC + y,12);
    putpixel(xC + x,yC - y,12);
    putpixel(xC - x,yC + y,12);
    putpixel(xC - x,yC - y,12);
    putpixel(xC + y,yC + x,12);
    putpixel(xC - y,yC + x,12);
    putpixel(xC + y,yC - x,12);
    putpixel(xC - y,yC - x,12);
}










*******************************Bresenham Algo***************************************************
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<math.h>

void drawline(int x0, int y0, int x1, int y1)
{
int dx, dy, p, x, y;
dx=abs(x1-x0);
dy=abs(y1-y0);
x=x0;
y=y0;
p=2*dy-dx;
while(x<x1)
{
if(p>=0)
{
putpixel(x,y,7);
y++;
p=p+2*dy-2*dx;
}
else
{
putpixel(x,y,7);
p=p+2*dy;
}
x++;
}
}
int main()
{
int gd=DETECT,gm,x0,y0,x1,y1;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
cout<<"enter the coordinates of first point:";
cin>.x0>>y0;
cout<<"enter the coordinates of second point:";
cin>>x1>>y1;
drawline(x0,y0,x1,y1);
getch();
return 0;
}









**********************Man In Rain*****************************************************************
#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
#include<conio.h>
#include<dos.h>

#define SW getmaxx()
#define SH getmaxy()
#define GY SH*0.75

int ldisp=0;

void ManU(int x,int ldisp)
{
//head
circle(x,GY-90,10);
line(x,GY-80,x,GY-30);
//hand
line(x,GY-70,x+10,GY-60);
line(x,GY-65,x+10,GY-55);
line(x+10,GY-60,x+20,GY-70);
line(x+10,GY-55,x+20,GY-70);
//legs
line(x,GY-30,x+ldisp,GY);
line(x,GY-30,x-ldisp,GY);
//umbrella
pieslice(x+20,GY-120,0,180,40);
line(x+20,GY-120,x+20,GY-70);
}

void Rain(int x)
{
int i,rx,ry;
for(i=0;i<400;i++)
{
 rx=rand() % SW;
 ry=rand() % SH;
 if(ry<GY-4)
 {
  if(ry<GY-120 || (ry>GY-120 && (rx<x-20 || rx>x+60)))
  line(rx,ry,rx+0.5,ry+4);
 }
}
}
void main()
{	
  int gd=DETECT,gm,x=0;
  initgraph(&gd,&gm,"C:\\TurboC3\\BGI");
  while(!kbhit())
  {
   //Draw Ground
   line(0,GY,SW,GY);
   Rain(x);
   ldisp=(ldisp+2)%20;
   ManU(x,ldisp);
   delay(75);
   cleardevice();
   x=(x+2)%SW;
}
  getch();
}














**************DDA************************************
#include <graphics.h>
#include <iostream.h>
#include <math.h>
#include <dos.h>
 
void main( )
{
    float x,y,x1,y1,x2,y2,dx,dy,step;
    int i,gd=DETECT,gm;
 
    initgraph(&gd,&gm,"c:\\turboc3\\bgi");
 
    cout<<"Enter the value of x1 and y1 : ";
    cin>>x1>>y1;
    cout<<"Enter the value of x2 and y2: ";
    cin>>x2>>y2;
 
    dx=abs(x2-x1);
    dy=abs(y2-y1);
 
    if(dx>=dy)
        step=dx;
    else
        step=dy;
 
    dx=dx/step;
    dy=dy/step;
 
    x=x1;
    y=y1;
 
    i=1;
    while(i<=step)
    {
        putpixel(x,y,5);
        x=x+dx;
        y=y+dy;
        i=i+1;
        delay(100);
    }
 
    closegraph();
}









***************Boundary fill**************************************************
#include<graphics.h>
#include<iostream>
#include<conio.h>
#include<math.h>
using namespace std;
void line1(const int,const int,const int,const int);
void polygon1(const int,const int []);
void boundry_fill2(const int , const int, const int , const int);
int main(){
int gd=DETECT,gm;
initgraph(&gd,&gm,” “);
int polygon_points[14]={365,325, 400,290, 450,290, 485,325, 450,360,
400,360, 365,325};
setcolor(15);
polygon1(7,polygon_points);
boundry_fill2(425,325,14,15);
setcolor(15);
settextstyle(0,0,1);
outtextxy(395,370,”polygon”);
getch();
return 0;}
//boundryfill
void boundry_fill2(const int x, const int y, const int fill_color, const int border_color){
int interior_color;
interior_color=getpixel(x,y);
if((interior_color!=border_color) && (interior_color!=fill_color)){
putpixel(x,y,fill_color);
boundry_fill2(x+1,y,fill_color,border_color);
boundry_fill2(x-1,y,fill_color,border_color);
boundry_fill2(x,y-1,fill_color,border_color);
boundry_fill2(x,y+1,fill_color,border_color);
} }
//polygon//
void polygon1(const int n,const int coordinates[]){
if(n>=2){
line1(coordinates[0],coordinates[1],coordinates[2],coordinates[3]);
for(int count=1;count<(n-1);count++)
line1(coordinates[(count*2)],coordinates[((count*2)+1)],coordinates[((count
+1)*2)],coordinates[(((count+1)*2)+1)]); } }
//line
void line1(const int x_1, const int y_1, const int x_2, const int y_2){
int color=getcolor();
int x1=x_1;
int y1=y_1;
int x2=x_2;
int y2=y_2;
if(x_1>x_2){
x1=x_2;
y1=y_2;
x2=x_1;
y2=y_1;}
int dx=abs(x2-x1);
int dy=abs(y2-y1);
int inc_dec=((y2>=y1)?1:-1);
if(dx>dy){
int two_dy=(2*dy);
int two_dy_dx=(2*(dy-dx));
int p=((2*dy)-dx);
int x=x1;
int y=y1;
putpixel(x,y,color);
while(x<x2){
x++;
if(p<0)
p+=two_dy;
else{
y+=inc_dec;
p+=two_dy_dx;}
putpixel(x,y,color);}}
else{
int two_dx=(2*dx);
int two_dx_dy=(2*(dx-dy));
int p=((2*dx)-dy);
int x=x1;
int y=y1;
putpixel(x,y,color);
while(y!=y2){
y+=inc_dec;
if(p<0)
p+=two_dx;
else{
x++;
p+=two_dx_dy;}
putpixel(x,y,color);
}}}





********************Flood Fill**************************
#include<iostream.h>
#include<graphics.h>
#include<dos.h>
 
void floodFill(int x,int y,int oldcolor,int newcolor)
{
    if(getpixel(x,y) == oldcolor)
    {
        putpixel(x,y,newcolor);
        floodFill(x+1,y,oldcolor,newcolor);
        floodFill(x,y+1,oldcolor,newcolor);
        floodFill(x-1,y,oldcolor,newcolor);
        floodFill(x,y-1,oldcolor,newcolor);
    }
}
//getpixel(x,y) gives the color of specified pixel 
 
int main()
{
    int gm,gd=DETECT,radius;
    int x,y;
    
    cout<<"Enter x and y positions for circle\n";
    cin>>x>>y;
    cout<<"Enter radius of circle\n";
    cin>>radius;
    
    initgraph(&gd,&gm,"c:\\turboc3\\bgi");
    circle(x,y,radius);
    floodFill(x,y,0,15);
    delay(5000);
    closegraph();
    
    return 0;
}







***************Line Clipping********************************
#include<iostream.h>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
#include<dos.h>
 
typedef struct coordinate
{
    int x,y;
    char code[4];
}PT;
 
void drawwindow();
void drawline(PT p1,PT p2);
PT setcode(PT p);
int visibility(PT p1,PT p2);
PT resetendpt(PT p1,PT p2);
 
void main()
{
    int gd=DETECT,v,gm;
    PT p1,p2,p3,p4,ptemp;
    
    cout<<"\nEnter x1 and y1\n";
    cin>>p1.x>>p1.y;
    cout<<"\nEnter x2 and y2\n";
    cin>>p2.x>>p2.y;
    
    initgraph(&gd,&gm,"c:\\turboc3\\bgi");
    drawwindow();
    delay(500);
    
    drawline(p1,p2);
    delay(500);
    cleardevice();
    
    delay(500);
    p1=setcode(p1);
    p2=setcode(p2);
    v=visibility(p1,p2);
    delay(500);
    
    switch(v)
    {
    case 0: drawwindow();
            delay(500);
            drawline(p1,p2);
            break;
    case 1:    drawwindow();
            delay(500);
            break;
    case 2:    p3=resetendpt(p1,p2);
            p4=resetendpt(p2,p1);
            drawwindow();
            delay(500);
            drawline(p3,p4);
            break;
    }
    
    delay(5000);
    closegraph();
}
 
void drawwindow()
{
    line(150,100,450,100);
    line(450,100,450,350);
    line(450,350,150,350);
    line(150,350,150,100);
}
 
void drawline(PT p1,PT p2)
{
    line(p1.x,p1.y,p2.x,p2.y);
}
 
PT setcode(PT p)    //for setting the 4 bit code
{
    PT ptemp;
    
    if(p.y<100)
        ptemp.code[0]='1';    //Top
    else
        ptemp.code[0]='0';
    
    if(p.y>350)
        ptemp.code[1]='1';    //Bottom
    else
        ptemp.code[1]='0';
        
    if(p.x>450)
        ptemp.code[2]='1';    //Right
    else
        ptemp.code[2]='0';
        
    if(p.x<150)
        ptemp.code[3]='1';    //Left
    else
        ptemp.code[3]='0';
    
    ptemp.x=p.x;
    ptemp.y=p.y;
    
    return(ptemp);
}
 
int visibility(PT p1,PT p2)
{
    int i,flag=0;
    
    for(i=0;i<4;i++)
    {
        if((p1.code[i]!='0') || (p2.code[i]!='0'))
            flag=1;
    }
    
    if(flag==0)
        return(0);
    
    for(i=0;i<4;i++)
    {
        if((p1.code[i]==p2.code[i]) && (p1.code[i]=='1'))
            flag='0';
    }
    
    if(flag==0)
        return(1);
    
    return(2);
}
 
PT resetendpt(PT p1,PT p2)
{
    PT temp;
    int x,y,i;
    float m,k;
    
    if(p1.code[3]=='1')
        x=150;
    
    if(p1.code[2]=='1')
        x=450;
    
    if((p1.code[3]=='1') || (p1.code[2]=='1'))
    {
        m=(float)(p2.y-p1.y)/(p2.x-p1.x);
        k=(p1.y+(m*(x-p1.x)));
        temp.y=k;
        temp.x=x;
        
        for(i=0;i<4;i++)
            temp.code[i]=p1.code[i];
        
        if(temp.y<=350 && temp.y>=100)
            return (temp);
    }
    
    if(p1.code[0]=='1')
        y=100;
    
    if(p1.code[1]=='1')
        y=350;
        
    if((p1.code[0]=='1') || (p1.code[1]=='1'))
    {
        m=(float)(p2.y-p1.y)/(p2.x-p1.x);
        k=(float)p1.x+(float)(y-p1.y)/m;
        temp.x=k;
        temp.y=y;
        
        for(i=0;i<4;i++)
            temp.code[i]=p1.code[i];
        
        return(temp);
    }
    else
        return(p1);
}












***************Mumtaj wala TAj MAhal******************************************************
#include<iostream.h>
#include<conio.h>
#include<math.h>
#include<stdlib.h>
#include<dos.h>
#include<graphics.h>


int sign(float arg)
{
	if(arg<0)
	{
		return -1;
	}
	if(arg==0)
		{
			return 0;
		}
	
		return 1;
	
}

void drawline(int x1,int y1,int x2,int y2)
{
	int s1,s2,exchange,y,x,i;
	float dx,dy,g,temp;
	dx=abs(x2-x1);
	dy=abs(y2-y1);
	x=x1;
	y=y1;
	s1=sign(x2-x1);
	s2=sign(y2-y1);
	if(dy>dx)
	{
		temp=dx;
		dx=dy;
		dy=temp;
		exchange=1;
	}
	else
	{
		exchange=0;
	}
	
	g=2*dy-dx;
	i=1;
	while(i<=dx)
	{
		putpixel(x,y,WHITE);
		delay(1);
		while(g>=0)
		{
			if(exchange==1)
			{
				x=x+s1;
			}
			else
			{
				y=y+s2;
			}
			g=g-2*dx;
		}
		if(exchange==1)
		{
			y=y+s2;
		}
		else
		{
			x=x+s1;
		}
		g=g+2*dy;
		i++;
	}
}



main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int h=40;
drawline(0,440,639,440);


//=================================Ist tower========================//
//=================================IIst tower============================//
//#################TOWER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
int l=-20;
drawline(28+l,400+h,33+l,333+h);
drawline(86+l,400+h,80+l,333+h);
//||||||||||||||||||||||||||||||Ist stage||||||||||||||||||||||||||||||||||||||||||||//
drawline(23+l,328+h,32+l,334+h);               // slant
drawline(88+l,328+h,80+l,334+h);                       // slant
drawline(83+l,323+h,75+l,334+h);                       // slant
drawline(75+l,323+h,70+l,332+h);
drawline(66+l,323+h,65+l,332+h);                       // slant
drawline(57+l,323+h,57+l,332+h);                       // slant
drawline(30+l,323+h,39+l,334+h);                       // slant
drawline(38+l,323+h,45+l,332+h);
drawline(48+l,323+h,51+l,332+h);      // slant

ellipse(57+l,320+h,350,190,34,5);
ellipse(57+l,327+h,350,190,34,5);
ellipse(57+l,337+h,0,180,25,5);
drawline(22+l,320+h,22+l,328+h);
drawline(91+l,320+h,91+l,327+h);
setfillstyle(6,15);
floodfill(60+l,320+h,15);

setfillstyle(10,15);

floodfill(60+l,320+h+15,15);


//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
//+++++++++++++++++++++++++++++++++++2nd+++++++++++++++++++++++++++

drawline(35+l,315+h,38+l,242+h);
drawline(80+l,315+h,75+l,242+h);

//||||||||||||||||||||||||||||||2ststage||||||||||||||||||||||||||||||||||||||||||||//
int t=-93;
drawline(23+4+l,328+t+3+h,32+5+l,334+t+h);               // slant
drawline(88+l,328+t+2+h,76+l,334+t+h);                       // slant

drawline(78+l,323+t+3+h,71+l,332+t+h);
drawline(66+l,323+t+2+h,65+l,332+t+h);                       // slant
drawline(57+l,323+t+2+h,57+l,332+t-2+h);                       // slant

drawline(35+l,323+t+3+h,45-3+l,332+t+h);
drawline(48+l,323+t+2+h,51+l,332+t-2+h);      // slant

ellipse(57+l,320+t+3+h,360,190,30,5);
ellipse(57+l,327+t+3+h,360,190,30,5);
ellipse(57+l,337+t-1+h,0,180,18,5);

drawline(26+l,320+t+3+h,26+l,328+t+2+h);
drawline(88+l,320+t+3+h,88+l,327+t+3+h);
//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
setfillstyle(6,15);
floodfill(60+l,320+h+t,15);                            ////////////////
setfillstyle(10,15);
floodfill(60+l,320+h-35,15);

//||||||||||||||||||||||||||||||3rd stage||||||||||||||||||||||||||||||||||||||||||||//

drawline(38+l,225+h,41+l,152+h);
drawline(75+l,225+h,72+l,152+h);



 t=-182;
drawline(32+l,328+t+4+h,32+7+l,334+t+h);               // slant
drawline(80+l,328+t+4+h,73+l,334+t+h);                       // slant
//drawline(+l83,323+t+4,75,334+t);                       // slant
drawline(76+l,323+t+5+h,71+l,332+t+h);
drawline(66+l,323+t+4+h,65+l,332+t+h);                       // slant
drawline(57+l,323+t+4+h,57+l,332+t-2+h);                       // slant
//drawline(30,323+t+2,39,334+t);                       // slant
drawline(39+l,323+t+6+h,45+l,332+t+1+h);
drawline(48+l,323+t+4+h,51+l,332+t+h);      // slant

ellipse(57+l,320+t+6+h,360,190,24,5);
ellipse(57+l,327+t+4+h,360,190,24,5);
ellipse(57+l,337+t-1+h,0,170,16,5);

drawline(32+l,320+t+6+h,32+l,328+t+3+h);
drawline(81+l,320+t+6+h,81+l,327+t+3+h);

setfillstyle(6,15);
floodfill(60+l,322+h+t,15);
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
setfillstyle(10,15);
floodfill(60+l,322+h+t+30,15);
//GGF################TOWER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//

ellipse(51+l,132+h,340,216,4,15);
ellipse(62+l,131+h,327,216,4,15);
ellipse(72+l,132+h,327,216,2,15);
ellipse(42+l,132+h,327,216,2,15);
ellipse(57+l,107+h,0,170,16,5);
drawline(40+l,107+h,40+l,140+h);
drawline(75+l,107+h,75+l,140+h);

drawline(34+l,107+h,40+l,107+h);
drawline(75+l,107+h,81+l,107+h);

drawline(34+l,107+h,28+l,102+h);                      //slant
drawline(81+l,107+h,87+l,102+h);

drawline(28+l,102+h,34+l,98+h);
drawline(87+l,102+h,81+l,98+h);

drawline(34+l,98+h,58+l,95+h);
drawline(58+l,95+h,81+l,98+h);


ellipse(65+l,92+h,104,190,30,30);

ellipse(50+l,92+h,350,76,30,30);

drawline(58+l,61+h,58+l,63+h);
circle(58+l,58+h,3);
drawline(58+l,55+h,58+l,53+h);
circle(58+l,50+h,2);
drawline(58+l,48+h,58+l,47+h);
circle(58+l,45+h,1);
drawline(58+l,44+h,58+l,41+h);
setfillstyle(6,15);
floodfill(60+l-2,322+h+t-60,15);

setfillstyle(10,15);
floodfill(60+l-2,322+h+t-30,15);


//=================================IIst tower============================//
//#################TOWER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
 l=547;


drawline(28+l,400+h,33+l,333+h);
drawline(86+l,400+h,80+l,333+h);
//||||||||||||||||||||||||||||||Ist stage||||||||||||||||||||||||||||||||||||||||||||//
drawline(23+l,328+h,32+l,334+h);               // slant
drawline(88+l,328+h,80+l,334+h);                       // slant
drawline(83+l,323+h,75+l,334+h);                       // slant
drawline(75+l,323+h,70+l,332+h);
drawline(66+l,323+h,65+l,332+h);                       // slant
drawline(57+l,323+h,57+l,332+h);                       // slant
drawline(30+l,323+h,39+l,334+h);                       // slant
drawline(38+l,323+h,45+l,332+h);
drawline(48+l,323+h,51+l,332+h);      // slant

ellipse(57+l,320+h,350,190,34,5);
ellipse(57+l,327+h,350,190,34,5);
ellipse(57+l,337+h,0,180,25,5);
drawline(22+l,320+h,22+l,328+h);
drawline(91+l,320+h,91+l,327+h);
setfillstyle(6,15);
floodfill(60+l,320+h,15);

setfillstyle(10,15);

floodfill(60+l,320+h+15,15);


//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
//+++++++++++++++++++++++++++++++++++2nd+++++++++++++++++++++++++++
drawline(35+l,315+h,38+l,242+h);
drawline(80+l,315+h,75+l,242+h);

//||||||||||||||||||||||||||||||2st stage||||||||||||||||||||||||||||||||||||||||||||//
t=-93;
drawline(23+4+l,328+t+3+h,32+5+l,334+t+h);               // slant
drawline(88+l,328+t+2+h,76+l,334+t+h);                       // slant

drawline(78+l,323+t+3+h,71+l,332+t+h);
drawline(66+l,323+t+2+h,65+l,332+t+h);                       // slant
drawline(57+l,323+t+2+h,57+l,332+t-2+h);                       // slant

drawline(35+l,323+t+3+h,45-3+l,332+t+h);
drawline(48+l,323+t+2+h,51+l,332+t-2+h);      // slant

ellipse(57+l,320+t+3+h,360,190,30,5);
ellipse(57+l,327+t+3+h,360,190,30,5);
ellipse(57+l,337+t-1+h,0,180,18,5);

drawline(26+l,320+t+3+h,26+l,328+t+2+h);
drawline(88+l,320+t+3+h,88+l,327+t+3+h);
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
setfillstyle(6,15);
floodfill(60+l,320+h+t,15);                            ////////////////
setfillstyle(10,15);
floodfill(60+l,320+h-35,15);

//||||||||||||||||||||||||||||||3rd stage||||||||||||||||||||||||||||||||||||||||||||//

drawline(38+l,225+h,41+l,152+h);
drawline(75+l,225+h,72+l,152+h);



 t=-182;
drawline(32+l,328+t+4+h,32+7+l,334+t+h);               // slant
drawline(80+l,328+t+4+h,73+l,334+t+h);                       // slant

drawline(76+l,323+t+5+h,71+l,332+t+h);
drawline(66+l,323+t+4+h,65+l,332+t+h);                       // slant
drawline(57+l,323+t+4+h,57+l,332+t-2+h);                       // slant

drawline(39+l,323+t+6+h,45+l,332+t+1+h);
drawline(48+l,323+t+4+h,51+l,332+t+h);      // slant

ellipse(57+l,320+t+6+h,360,190,24,5);
ellipse(57+l,327+t+4+h,360,190,24,5);
ellipse(57+l,337+t-1+h,0,170,16,5);

drawline(32+l,320+t+6+h,32+l,328+t+3+h);
drawline(81+l,320+t+6+h,81+l,327+t+3+h);

setfillstyle(6,15);
floodfill(60+l,322+h+t,15);
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
setfillstyle(10,15);
floodfill(60+l,322+h+t+30,15);
//GGF################TOWER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//

ellipse(51+l,132+h,340,216,4,15);
ellipse(62+l,131+h,327,216,4,15);
ellipse(72+l,132+h,327,216,2,15);
ellipse(42+l,132+h,327,216,2,15);
ellipse(57+l,107+h,0,170,16,5);
drawline(40+l,107+h,40+l,140+h);
drawline(75+l,107+h,75+l,140+h);

drawline(34+l,107+h,40+l,107+h);
drawline(75+l,107+h,81+l,107+h);

drawline(34+l,107+h,28+l,102+h);                      //slant
drawline(81+l,107+h,87+l,102+h);

drawline(28+l,102+h,34+l,98+h);
drawline(87+l,102+h,81+l,98+h);

drawline(34+l,98+h,58+l,95+h);
drawline(58+l,95+h,81+l,98+h);


ellipse(65+l,92+h,104,190,30,30);

ellipse(50+l,92+h,350,76,30,30);

drawline(58+l,61+h,58+l,63+h);
circle(58+l,58+h,3);
drawline(58+l,55+h,58+l,53+h);
circle(58+l,50+h,2);
drawline(58+l,48+h,58+l,47+h);
circle(58+l,45+h,1);
drawline(58+l,44+h,58+l,41+h);
setfillstyle(6,15);
floodfill(60+l-2,322+h+t-60,15);

setfillstyle(10,15);
floodfill(60+l-2,322+h+t-30,15);
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//

//GGF################TOWER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//

ellipse(51+l,132+h,340,216,4,15);
ellipse(62+l,131+h,327,216,4,15);
ellipse(72+l,132+h,327,216,2,15);
ellipse(42+l,132+h,327,216,2,15);
ellipse(57+l,107+h,0,170,16,5);
drawline(40+l,107+h,40+l,140+h);
drawline(75+l,107+h,75+l,140+h);

drawline(34+l,107+h,40+l,107+h);
drawline(75+l,107+h,81+l,107+h);

drawline(34+l,107+h,28+l,102+h);                      //slant
drawline(81+l,107+h,87+l,102+h);

drawline(28+l,102+h,34+l,98+h);
drawline(87+l,102+h,81+l,98+h);

drawline(34+l,98+h,58+l,95+h);
drawline(58+l,95+h,81+l,98+h);


ellipse(65+l,92+h,104,190,30,30);

ellipse(50+l,92+h,350,76,30,30);

drawline(58+l,61+h,58+l,63+h);
circle(58+l,58+h,3);
drawline(58+l,55+h,58+l,53+h);
circle(58+l,50+h,2);
drawline(58+l,48+h,58+l,47+h);
circle(58+l,45+h,1);
drawline(58+l,44+h,58+l,41+h);


//=================================Ist tower========================//

//+++++++++++++++++++++++++++++++++TAJ mahal++++++++++++++++++++++++//

////setcolor(15);

rectangle(275,290,365,440);         //  inner
rectangle(268,283,372,440);           //     //inner
setfillstyle(1,15);
floodfill(274,294,15);
drawline(280,440,280,350);

ellipse(315,349,130,180,35,40);
ellipse(275,280,290,326,53,40);

drawline(360,440,360,350);
ellipse(325,349,360,50,35,40);
ellipse(361,280,216,255,53,40);
//setfillstyle(9,7);
//floodfill(277,386,15);
putpixel(277,386,14);

drawline(280,360,359,360);
drawline(280,364,359,364);
//setfillstyle(1,15);
//floodfill(281,362,15);

rectangle(295+4,370,345-4,440);
rectangle(292+4,367,348-4,440);
//setfillstyle(1,15);
//floodfill(294+4,369,15);
rectangle(296,378,344,380);
//floodfill(301,379,15);


drawline(302,405,302,440);
drawline(338,405,338,440);
ellipse(327,405,108,180,25,20);

ellipse(313,405,360,74,25,20);

setfillstyle(7,15);

drawline(329,390,329,440);
drawline(310,391,310,440);
drawline(311,402,329,402);
drawline(311,422,329,422);
drawline(302,412,310,412);
drawline(329,412,338,412);

drawline(302,428,310,428);
drawline(329,428,338,428);



 int p=-60;
drawline(302,405+p,302,440+p-20);
drawline(338,405+p,338,440+p-20);
ellipse(327,405+p,108,180,25,20);

ellipse(313,405+p,360,74,25,20);
setfillstyle(7,15);
floodfill(311,406,15);
drawline(329,390+p,329,440+p-20);
drawline(310,391+p,310,440+p-20);
drawline(311,402+p,329,402+p);
drawline(311,422+p-7,329,422+p-7);
drawline(302,412+p,310,412+p);
drawline(329,412+p,338,412+p);



//??//////////////////////////////////2nd portion/////////////////////


rectangle(245,260,400,440);         //  inner
rectangle(230,245,415,440);           //     //inner

rectangle(230,425,275,440);
setfillstyle(1,15);
floodfill(231,426,15);
floodfill(249,426,15);
rectangle(230+135,425,275+140,440);

floodfill(231+160,426,15);
floodfill(249+159,426,15);


drawline(415,290,415,440);
drawline(420,245,420,440);

drawline(415,240,415,205);
drawline(420,240,420,205);


drawline(225,245,225,440);          //vertical
drawline(230,250,230,440);

drawline(225,240,225,205);          //vertical
drawline(230,240,230,205);

drawline(222,240,425,240);
drawline(222,245,425,245);                    //horz

ellipse(222,242.5,90,270,2.5,2.5);
ellipse(425,242.5,270,90,2.5,2.5);

rectangle(231,230,414,239);



ellipse(227,206,0,180,9,1);
ellipse(227,204,0,180,9,1);
putpixel(220,204,15);
putpixel(220,205,15);
putpixel(220,206,15);
putpixel(235,204,15);
putpixel(235,205,15);
putpixel(235,206,15);
ellipse(227,203,0,180,6,7);
drawline(227,195,227,192);
int r=190;

ellipse(227+r,206,0,180,9,1);
ellipse(227+r,204,0,180,9,1);
putpixel(220+r,204,15);
putpixel(220+r,205,15);
putpixel(220+r,206,15);
putpixel(235+r,204,15);
putpixel(235+r,205,15);
putpixel(235+r,206,15);

ellipse(227+r,203,0,180,6,7);
drawline(227+r,195,227+r,192);


ellipse(315,170,140,210,105,100);
ellipse(330,170,330,40,105,100);

ellipse(292,167,105,140,75,95);
ellipse(353,167,40,75,75,95);

ellipse(323,78,350,190,60,8);
ellipse(323,77,350,190,60,8);



ellipse(240,24,321,358,78,71);
ellipse(192,40,342,7,128,100);

ellipse(448,30,180,203,128,100);
ellipse(443,5,194,220,128,100);
ellipse(438,-9,203,234,128,100);
ellipse(198,-6,310,340,128,100);

ellipse(319,30,0,360,7,2);

floodfill(320,29,15);
circle(319,24,3);
drawline(319,20,319,18);
circle(319,14,4);
drawline(319,9,319,0);
circle(319,2,1);
drawline(316,6,322,6);
drawline(316,6,314,4);
drawline(322,6,324,4);
/////////////////////////////////////////////////
ellipse(321,258,48,130,140,50);
ellipse(321,255,48,130,140,50);

ellipse(321,241,48,130,140,50);
ellipse(321,238,48,130,140,50);
 delay(300);
setfillstyle(10,15);

floodfill(322,160,15);
//setfillstyle(6,15);

//floodfill(322,193,15);




///////////////////////////////////////////new////////////////////////////
rectangle(150,283,225,294);
drawline(150,298,225,298);

drawline(150,240,150,440);            //pole
drawline(146,240,146,440);

drawline(150,299,150,440);            //pole
drawline(146,299,146,440);


r=-80;
int n=34;

ellipse(227+r,206+n,0,180,9,1);
ellipse(227+r,204+n,0,180,9,1);
putpixel(220+r,204+n,15);
putpixel(220+r,205+n,15);
putpixel(220+r,206+n,15);
putpixel(235+r,204+n,15);
putpixel(235+r,205+n,15);
putpixel(235+r,206+n,15);

ellipse(227+r,203+n,0,180,6,7);
drawline(227+r,195+n,227+r,192+n);

l=128;
h=150;

ellipse(51+l,132+h-7,340,216,4,15);
ellipse(62+l,131+h-7,327,216,4,15);
ellipse(72+l,132+h-7,327,216,2,15);
ellipse(42+l,132+h-7,327,216,2,15);
ellipse(57+l,107+h,0,170,16,5);
drawline(40+l,107+h,40+l,140+h-7);
drawline(75+l,107+h,75+l,140+h-7);

drawline(34+l,107+h,40+l,107+h);
drawline(75+l,107+h,81+l,107+h);

drawline(34+l,107+h,28+l,102+h);                      //slant
drawline(81+l,107+h,87+l,102+h);

drawline(28+l,102+h,34+l,98+h);
drawline(87+l,102+h,81+l,98+h);

drawline(34+l,98+h,58+l,95+h);
drawline(58+l,95+h,81+l,98+h);


ellipse(65+l,92+h,104,190,30,30);

ellipse(50+l,92+h,350,76,30,30);

drawline(58+l,61+h,58+l,63+h);
circle(58+l,58+h,3);
drawline(58+l,55+h,58+l,53+h);
circle(58+l,50+h,2);
drawline(58+l,48+h,58+l,47+h);
circle(58+l,45+h,1);
drawline(58+l,44+h,58+l,41+h);


drawline(100-5,240+15,100-5,440);            //pole
drawline(96-5,240+15,96-5,440);

r=-134;
 n=49;
ellipse(227+r,206+n,0,180,9,1);
ellipse(227+r,204+n,0,180,9,1);
putpixel(220+r,204+n,15);
putpixel(220+r,205+n,15);
putpixel(220+r,206+n,15);
putpixel(235+r,204+n,15);
putpixel(235+r,205+n,15);
putpixel(235+r,206+n,15);

ellipse(227+r,203+n,0,180,6,7);
drawline(227+r,195+n,227+r,192+n);


drawline(146,294,97,302);
drawline(146,298,97,306);

drawline(146,283,97,291);


///////////////////////////////////////inner/////////////////
rectangle(155,302,220,364);
rectangle(155,302+70,220,364+75);

int q=-133;
int d=-2;
drawline(302+q-5,405+d,302+q-5,440+d);
drawline(338+q+5,405+d,338+q+5,440+d);
ellipse(327+q+5,405+d,108,180,35,30);

ellipse(313+q-5,406+d,360,74,35,30);


d=-77;
drawline(302+q-5,405+d,302+q-5,440+d);
drawline(338+q+5,405+d,338+q+5,440+d);
ellipse(327+q,405+d,105,180,30,25);

ellipse(313+q,405+d,360,80,30,25);
putpixel(163,300,11);
/*setfillstyle(6,15);
floodfill(163,330,15);
floodfill(160,380,15);*/

drawline(141,305,141,360);
drawline(101,310,101,365);
drawline(141,305,101,310);
drawline(141,360,101,365);


int x=70;
drawline(141,305+x,141,440);
drawline(101,310+x,101,440);
drawline(141,305+x,101,310+x);



q=-200;
drawline(302+q+4,405+d,302+q+4,440+d);
drawline(338+q-1,405+d,338+q-1,440+d-2);
ellipse(327+q,405+d,105,180,20,15);
ellipse(313+q+4,405+d,360,80,20,15);

d=1;
drawline(302+q+4,405+d,302+q+4,440+d-2);
drawline(338+q-1,405+d,338+q-1,440+d-2);
ellipse(327+q,405+d,105,180,20,15);
ellipse(313+q+4,405+d,360,80,20,15);

rectangle(178,415,197,439);
//setfillstyle(7,15);
//floodfill(179,416,15);
 rectangle(178,415-75,197,440-76);
//setfillstyle(7,15);
//floodfill(179,415-75+1,15);

drawline(130-3,417,130-3,440);
drawline(113+3,420,113+3,440);

drawline(113+3,420,130-3,417);
putpixel(114,423,4);
drawline(113,440,130,440);
//floodfill(114+3,423,15);



int a=-76;
drawline(130-3,417+a,130-3,440+a-3);
drawline(113+3,420+a,113+3,440+a);

drawline(113+3,420+a,130-3,417+a);
putpixel(114,423,4);
//floodfill(114+3,423+a,15);



drawline(10,400+h,615,400+h);



//////////////////////////////////////////////right\\\\\\\\\\\


int e=270;
rectangle(150+e,283,226+e,294);
drawline(146+e+4,294,225+e,294);
drawline(146+e+4,298,225+e,298);


drawline(150+e+80,240,150+e+80,440);            //pole
drawline(146+e+80,240,146+e+80,440);

drawline(150+e+80,299,150+e+80,440);            //pole
drawline(146+e+80,299,146+e+80,440);





l=400;
h=+149;
ellipse(51+l,132+h-7,340,216,4,15);
ellipse(62+l,131+h-7,327,216,4,15);
ellipse(72+l,132+h-7,327,216,2,15);
ellipse(42+l,132+h-7,327,216,2,15);
ellipse(57+l,107+h,0,170,16,5);
drawline(40+l,107+h,40+l,140+h-7);
drawline(75+l,107+h,75+l,140+h-7);

drawline(34+l,107+h,40+l,107+h);
drawline(75+l,107+h,81+l,107+h);

drawline(34+l,107+h,28+l,102+h);                      //slant
drawline(81+l,107+h,87+l,102+h);

drawline(28+l,102+h,34+l,98+h);
drawline(87+l,102+h,81+l,98+h);

drawline(34+l,98+h,58+l,95+h);
drawline(58+l,95+h,81+l,98+h);


ellipse(65+l,92+h,104,190,30,30);

ellipse(50+l,92+h,350,76,30,30);

drawline(58+l,61+h,58+l,63+h);
circle(58+l,58+h,3);
drawline(58+l,55+h,58+l,53+h);
circle(58+l,50+h,2);
drawline(58+l,48+h,58+l,47+h);
circle(58+l,45+h,1);
drawline(58+l,44+h,58+l,41+h);

r=270;
n=n-15;

ellipse(227+r,206+n,0,180,9,1);
ellipse(227+r,204+n,0,180,9,1);
putpixel(220+r,204+n,15);
putpixel(220+r,205+n,15);
putpixel(220+r,206+n,15);
putpixel(235+r,204+n,15);
putpixel(235+r,205+n,15);
putpixel(235+r,206+n,15);

ellipse(227+r,203+n,0,180,6,7);
drawline(227+r,195+n,227+r,192+n);



drawline(146+e+135,302,97+e+135,294);
drawline(146+e+135,306,97+e+135,298);

drawline(146+e+135,291,97+e+135,283);



drawline(100-5+e+190,240+15,100-5+e+190,440);            //pole
drawline(96-5+e+190,240+15,96-5+e+190,440);





r=325;
n+=15;
ellipse(227+r,206+n,0,180,9,1);
ellipse(227+r,204+n,0,180,9,1);
putpixel(220+r,204+n,15);
putpixel(220+r,205+n,15);
putpixel(220+r,206+n,15);
putpixel(235+r,204+n,15);
putpixel(235+r,205+n,15);
putpixel(235+r,206+n,15);

ellipse(227+r,203+n,0,180,6,7);
drawline(227+r,195+n,227+r,192+n);


rectangle(155+e,302,220+e,364);
rectangle(155+e,302+70,220+e,364+75);


q=140;
d-=1;
drawline(302+q-5,405+d,302+q-5,440+d);
drawline(338+q+5,405+d,338+q+5,440+d);
ellipse(327+q+5,405+d,108,180,35,30);

ellipse(313+q-5,406+d,360,74,35,30);

d=-77;
drawline(302+q-5,405+d,302+q-5,440+d);
drawline(338+q+5,405+d,338+q+5,440+d);
ellipse(327+q,405+d,105,180,30,25);

ellipse(313+q,405+d,360,80,30,25);
putpixel(163,300,11);
setfillstyle(6,15);
//floodfill(163,330,15);
//floodfill(160,380,15);
/////////////////////////////
e=e-15;
drawline(141+e+150,305+5,141+e+150,360+5);
drawline(101+e+150,310-5,101+e+150,365-5);
drawline(101+e+150,305,141+e+150,310);
drawline(101+e+150,360,141+e+150,365);

int v=75;
drawline(141+e+150,305+5+v-5,141+e+150,440);
drawline(101+e+150,310-5+v-5,101+e+150,440);
drawline(101+e+150,305+v-5,141+e+150,310+v-5);

e=e+18;
rectangle(178+e,415,197+e,439);
//setfillstyle(7,15);
//floodfill(179+e,416,15);
int f=-75;
rectangle(178+e,415+f,197+e,439+f);
//setfillstyle(7,15);
//floodfill(179+e,416+f,15);


e+=130;
drawline(130-3+e,440+a-2,130-3+e,417+a+2);
drawline(113+3+e,440+a-2,113+3+e,420+a-2);

drawline(113+3+e,417+a,130-3+e,420+a);
putpixel(114+e,423,4);
//floodfill(114+3+e,423+a,15);

a=1;
drawline(130-3+e,440+a-2,130-3+e,417+a+2);
drawline(113+3+e,440+a-2,113+3+e,420+a-2);

drawline(113+3+e,417+a,130-3+e,420+a);
putpixel(114+e,423,4);
drawline(113+3+e,440,130-3+e,440);
//floodfill(114+3+e,423+a,15);


q=204;
drawline(302+q+4,405+d,302+q+4,440+d-2);
drawline(338+q-1,405+d,338+q-1,440+d+2);
ellipse(327+q,405+d,105,180,20,15);
ellipse(313+q+4,405+d,360,80,20,15);
q=204;

d=0;
drawline(302+q+4,405+d,302+q+4,440+d-1);
drawline(338+q-1,405+d,338+q-1,440+d);
ellipse(327+q,405+d,105,180,20,15);
ellipse(313+q+4,405+d,360,80,20,15);
drawline(302+q+4,440,302+q+4,440);




setcolor(2);
outtextxy(170,450,"Yogi");

/*while(!kbhit())
{
delay(40);
putpixel(random(640),random(248),random(15));
 }
*/
  getch();
return 0;
}





************CAR**********************************************
#include<iostream.h>
#include<math.h>
#include<dos.hd>
#include<graphics.h>
#include<conio.h>
void main(){
	int gd=DETECT,gm;
	initgraph(&gd,&gm,"C://TURBOC3//BGI");

	for(int i=1;i<=10;i++){
		cleardevice();
		//road
		line(5,401,600,401);
		//tyres
		circle(100+i,375,25);
		circle(300+i,375,25);
		//lower body
		line(10+i,375,72+i,375);
		arc(100+i,375,0,180,28);
		line(126+i,375,274+i,375);
		arc(300+i,375,0,180,28);
		line(328+i,375,380+i,375);
		//upper body
		line(10+i,375,10+i,320);
		line(10+i,320,55+i,310);
		line(55+i,310,100+i,250);
		line(100+i,250,220+i,250);
		line(220+i,250,300+i,310);
		line(300+i,310,380+i,335);
		line(380+i,335,380+i,375);

		//window 1
		line(165+i,253,218+i,253);
		line(218+i,253,294+i,310);
		line(165+i,253,165+i,310);
		line(165+i,310,294+i,310);
		//window 2
		line(102+i,253,160+i,253);
		line(102+i,253,59+i,310);
		line(59+i,310,160+i,310);
		line(160+i,253,160+i,310);

		delay(10);
	}

	getch();
	closegraph();
}







**************Output primitives**********************************
#include<stdio.h>

#include<conio.h>

#include<graphics.h>

#include<string.h>

void main()

{

char ch='y';

int gd=DETECT,gm,x1,y1,x2,y2,rad,sa,ea,xrad,yrad,i;

initgraph(&gd,&gm,"");

while(ch=='y')

{

cleardevice();

setbkcolor(9);

outtextxy(100,150,"Enter 1 to get line");

outtextxy(100,170,"2.Circle");

outtextxy(100,190,"3.Box");

outtextxy(100,210,"4.Arc");

outtextxy(100,230,"5.Ellipse");

outtextxy(100,250,"6.Rectangle");

outtextxy(100,270,"7.Exit");

ch=getch();

cleardevice();

switch(ch)

{

case '1':

line(100,200,300,400);

break;

case '2':

circle(200,200,100);

break;

case '3':

setfillstyle(5,4);

bar(100,300,200,100);

break;

case '4':

setfillstyle(5,4);

arc(200,200,100,300,100);

break;

case '5':

setfillstyle(5,4);

fillellipse(100,100,50,100);

break;

case '6':

settextstyle(DEFAULT_FONT,0,2);

outtextxy(120,140,"VEL TECH");

line(100,100,100,300);

line(300,300,100,300);

line(100,100,300,100);

line(300,100,300,300);

break;

case '7':

closegraph();

return;

}

ch='y';

getch();

}

}
*****************************************************************************************************